// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               v3.20.3
// source: src/posts/posts.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "posts";

/** Postデータモデル */
export interface Post {
  id: string;
  title: string;
  views: number;
}

/** リクエスト/レスポンスメッセージ */
export interface Empty {
}

export interface PostId {
  id: string;
}

export interface PostList {
  posts: Post[];
}

export const POSTS_PACKAGE_NAME = "posts";

/** サービス定義 */

export interface PostsServiceClient {
  findAll(request: Empty): Observable<PostList>;

  findOne(request: PostId): Observable<Post>;
}

/** サービス定義 */

export interface PostsServiceController {
  findAll(request: Empty): Promise<PostList> | Observable<PostList> | PostList;

  findOne(request: PostId): Promise<Post> | Observable<Post> | Post;
}

export function PostsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["findAll", "findOne"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("PostsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("PostsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const POSTS_SERVICE_NAME = "PostsService";
